"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkFundsForTxFees = exports.getTxFees = exports.getTxTreasuryFee = exports.getTxGasFee = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
var nft_1 = require("../nft");
var marketplace_1 = require("../marketplace");
var capsule_1 = require("../capsule");
var balance_1 = require("../balance");
/**
 * @name getTxGasFee
 * @summary Get the gas fee estimation for a transaction.
 * @param txHex Transaction hex
 * @param address Public address of the sender
 * @returns Transaction fee estimation
 */
var getTxGasFee = function (txHex, address) { return __awaiter(void 0, void 0, void 0, function () {
    var api, tx, info;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.getApi)()];
            case 1:
                api = _a.sent();
                tx = api.tx(txHex);
                return [4 /*yield*/, tx.paymentInfo(address)];
            case 2:
                info = _a.sent();
                return [2 /*return*/, info.partialFee];
        }
    });
}); };
exports.getTxGasFee = getTxGasFee;
/**
 * @name getTxTreasuryFee
 * @summary Get the fee needed by Ternoa treasury for specific transaction services.
 * @description Some Ternoa's services required additional fees on top of chain gas fees, for example: minting a marketplace, minting an NFT or creating a capsule.
 * @param txHex Transaction hex
 * @returns Fee estimation
 */
var getTxTreasuryFee = function (txHex) { return __awaiter(void 0, void 0, void 0, function () {
    var api, tx, _a, capsuleMintFee, nftMintFee;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.getApi)()];
            case 1:
                api = _b.sent();
                tx = api.tx(txHex);
                _a = "".concat(tx.method.section, "_").concat(tx.method.method);
                switch (_a) {
                    case "".concat(constants_1.txPallets.nfts, "_").concat(constants_1.txActions.create): return [3 /*break*/, 2];
                    case "".concat(constants_1.txPallets.marketplace, "_").concat(constants_1.txActions.create): return [3 /*break*/, 4];
                    case "".concat(constants_1.txPallets.capsules, "_").concat(constants_1.txActions.create): return [3 /*break*/, 6];
                    case "".concat(constants_1.txPallets.capsules, "_").concat(constants_1.txActions.createFromNft): return [3 /*break*/, 9];
                }
                return [3 /*break*/, 11];
            case 2: return [4 /*yield*/, (0, nft_1.getNftMintFee)()];
            case 3: return [2 /*return*/, _b.sent()];
            case 4: return [4 /*yield*/, (0, marketplace_1.getMarketplaceMintFee)()];
            case 5: return [2 /*return*/, _b.sent()];
            case 6: return [4 /*yield*/, (0, capsule_1.getCapsuleMintFee)()];
            case 7:
                capsuleMintFee = _b.sent();
                return [4 /*yield*/, (0, nft_1.getNftMintFee)()];
            case 8:
                nftMintFee = _b.sent();
                return [2 /*return*/, capsuleMintFee.add(nftMintFee)];
            case 9: return [4 /*yield*/, (0, capsule_1.getCapsuleMintFee)()];
            case 10: return [2 /*return*/, _b.sent()];
            case 11:
                {
                    return [2 /*return*/, new bn_js_1.default(0)];
                }
                _b.label = 12;
            case 12: return [2 /*return*/];
        }
    });
}); };
exports.getTxTreasuryFee = getTxTreasuryFee;
/**
 * @name getTxFees
 * @summary Get the total fees for a transaction hex.
 * @param txHex Hex of the transaction
 * @param address Public address of the sender
 * @returns Total estimated fee which is the sum of the chain gas fee and the treasury fee
 */
var getTxFees = function (txHex, address) { return __awaiter(void 0, void 0, void 0, function () {
    var extrinsicFee, treasuryFee;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.getTxGasFee)(txHex, address)];
            case 1:
                extrinsicFee = _a.sent();
                return [4 /*yield*/, (0, exports.getTxTreasuryFee)(txHex)];
            case 2:
                treasuryFee = _a.sent();
                return [2 /*return*/, extrinsicFee.add(treasuryFee)];
        }
    });
}); };
exports.getTxFees = getTxFees;
/**
 * @name checkFundsForTxFees
 * @summary Check if a signed transaction sender has enough funds to pay transaction gas fees on transaction submit.
 * @param tx Signed transaction object
 */
var checkFundsForTxFees = function (tx) { return __awaiter(void 0, void 0, void 0, function () {
    var balance, fees;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, balance_1.getBalance)(tx.signer.toString())];
            case 1:
                balance = _a.sent();
                return [4 /*yield*/, (0, exports.getTxFees)(tx.toHex(), tx.signer.toString())];
            case 2:
                fees = _a.sent();
                if (balance.cmp(fees) === -1)
                    throw new Error("Insufficient funds for gas or treasury");
                return [2 /*return*/];
        }
    });
}); };
exports.checkFundsForTxFees = checkFundsForTxFees;

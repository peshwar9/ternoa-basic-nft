"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferKeepAlive = exports.transferAll = exports.transfer = exports.checkBalanceForTransfer = exports.getBalance = exports.getBalances = void 0;
var constants_1 = require("../constants");
var blockchain_1 = require("../blockchain");
/**
 * @name getBalances
 * @summary Get the balances of an account including free, reserved, miscFrozen and feeFrozen balances as well as the total.
 * @param address Public address of the account to get balances
 * @returns The balances of the account
 */
var getBalances = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var balances, free, reserved, miscFrozen, feeFrozen, total;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.system, constants_1.chainQuery.account, [address])];
            case 1:
                balances = (_a.sent()).data;
                free = balances.free, reserved = balances.reserved, miscFrozen = balances.miscFrozen, feeFrozen = balances.feeFrozen;
                total = free.add(reserved).add(miscFrozen).add(feeFrozen);
                return [2 /*return*/, __assign(__assign({}, balances), { total: total })];
        }
    });
}); };
exports.getBalances = getBalances;
/**
 * @name getFreeBalance
 * @summary Get the free balance of an account
 * @param address Public address of the account to get free balance for
 * @returns The free balance of the account
 */
var getBalance = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var balance;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.system, constants_1.chainQuery.account, [address])];
            case 1:
                balance = (_a.sent()).data;
                return [2 /*return*/, balance.free];
        }
    });
}); };
exports.getBalance = getBalance;
/**
 * @name checkBalanceForTransfer
 * @summary Check if an account as enough funds to ensure a transfer
 * @param address Public address of the account to check balance for transfer
 * @param value Token amount to transfer
 */
var checkBalanceForTransfer = function (address, value) { return __awaiter(void 0, void 0, void 0, function () {
    var balance, amount, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (value <= 0)
                    throw new Error("Value needs to be greater than 0");
                return [4 /*yield*/, (0, exports.getBalance)(address)];
            case 1:
                balance = _b.sent();
                if (!(typeof value === "number")) return [3 /*break*/, 3];
                return [4 /*yield*/, (0, blockchain_1.unFormatBalance)(value)];
            case 2:
                _a = _b.sent();
                return [3 /*break*/, 4];
            case 3:
                _a = value;
                _b.label = 4;
            case 4:
                amount = _a;
                if (balance.cmp(amount) === -1)
                    throw new Error("Insufficient funds to transfer");
                return [2 /*return*/];
        }
    });
}); };
exports.checkBalanceForTransfer = checkBalanceForTransfer;
/**
 * @name transfer
 * @summary Transfer some liquid free balance to another account
 * @param from Public address of the account to get balance for
 * @param to Public address of the account to transfer amount to
 * @param value Token amount to transfer
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
var transfer = function (from, to, value, keyring, callback) { return __awaiter(void 0, void 0, void 0, function () {
    var amount, _a, hash;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!(typeof value === "number")) return [3 /*break*/, 2];
                return [4 /*yield*/, (0, blockchain_1.unFormatBalance)(value)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = value;
                _b.label = 3;
            case 3:
                amount = _a;
                return [4 /*yield*/, (0, exports.checkBalanceForTransfer)(from, amount)];
            case 4:
                _b.sent();
                return [4 /*yield*/, (0, blockchain_1.runTx)(constants_1.txPallets.balances, constants_1.txActions.transfer, [to, amount], keyring, callback)];
            case 5:
                hash = _b.sent();
                return [2 /*return*/, hash];
        }
    });
}); };
exports.transfer = transfer;
/**
 * @name transferAll
 * @summary Transfer the entire transferable balance from the caller account
 * @param to Public address of the account to transfer amount to
 * @param keepAlive Ensure that the transfer does not kill the account, it retains the Existential Deposit
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
var transferAll = function (to, keepAlive, keyring, callback) {
    if (keepAlive === void 0) { keepAlive = true; }
    return __awaiter(void 0, void 0, void 0, function () {
        var hash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, blockchain_1.runTx)(constants_1.txPallets.balances, constants_1.txActions.transferAll, [to, keepAlive], keyring, callback)];
                case 1:
                    hash = _a.sent();
                    return [2 /*return*/, hash];
            }
        });
    });
};
exports.transferAll = transferAll;
/**
 * @name transferKeepAlive
 * @summary Transfer some liquid free balance to another account with a check that the transfer will not kill the origin account
 * @param from Public address of the account to get balance for
 * @param to Public address of the account to transfer amount to
 * @param value Token amount to transfer
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
var transferKeepAlive = function (from, to, value, keyring, callback) { return __awaiter(void 0, void 0, void 0, function () {
    var amount, _a, hash;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (!(typeof value === "number")) return [3 /*break*/, 2];
                return [4 /*yield*/, (0, blockchain_1.unFormatBalance)(value)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                _a = value;
                _b.label = 3;
            case 3:
                amount = _a;
                return [4 /*yield*/, (0, exports.checkBalanceForTransfer)(from, value)];
            case 4:
                _b.sent();
                return [4 /*yield*/, (0, blockchain_1.runTx)(constants_1.txPallets.balances, constants_1.txActions.transferKeepAlive, [to, amount], keyring, callback)];
            case 5:
                hash = _b.sent();
                return [2 /*return*/, hash];
        }
    });
}); };
exports.transferKeepAlive = transferKeepAlive;

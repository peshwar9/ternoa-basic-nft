import BN from "bn.js";
import type { IKeyringPair, ISubmittableResult } from "@polkadot/types/types";
/**
 * @name getBalances
 * @summary Get the balances of an account including free, reserved, miscFrozen and feeFrozen balances as well as the total.
 * @param address Public address of the account to get balances
 * @returns The balances of the account
 */
export declare const getBalances: (address: string) => Promise<{
    total: BN;
    free: BN;
    reserved: BN;
    miscFrozen: BN;
    feeFrozen: BN;
}>;
/**
 * @name getFreeBalance
 * @summary Get the free balance of an account
 * @param address Public address of the account to get free balance for
 * @returns The free balance of the account
 */
export declare const getBalance: (address: string) => Promise<BN>;
/**
 * @name checkBalanceForTransfer
 * @summary Check if an account as enough funds to ensure a transfer
 * @param address Public address of the account to check balance for transfer
 * @param value Token amount to transfer
 */
export declare const checkBalanceForTransfer: (address: string, value: number | BN) => Promise<void>;
/**
 * @name transfer
 * @summary Transfer some liquid free balance to another account
 * @param from Public address of the account to get balance for
 * @param to Public address of the account to transfer amount to
 * @param value Token amount to transfer
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
export declare const transfer: (from: string, to: string, value: number | BN, keyring?: IKeyringPair | undefined, callback?: ((result: ISubmittableResult) => void) | undefined) => Promise<`0x${string}`>;
/**
 * @name transferAll
 * @summary Transfer the entire transferable balance from the caller account
 * @param to Public address of the account to transfer amount to
 * @param keepAlive Ensure that the transfer does not kill the account, it retains the Existential Deposit
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
export declare const transferAll: (to: string, keepAlive?: boolean, keyring?: IKeyringPair | undefined, callback?: ((result: ISubmittableResult) => void) | undefined) => Promise<`0x${string}`>;
/**
 * @name transferKeepAlive
 * @summary Transfer some liquid free balance to another account with a check that the transfer will not kill the origin account
 * @param from Public address of the account to get balance for
 * @param to Public address of the account to transfer amount to
 * @param value Token amount to transfer
 * @param keyring Keyring pair to sign the data
 * @param callback Callback function to enable subscription, if not given, no subscription will be made
 * @returns Hash of the transaction or the hex value of the signable tx
 */
export declare const transferKeepAlive: (from: string, to: string, value: number | BN, keyring?: IKeyringPair | undefined, callback?: ((result: ISubmittableResult) => void) | undefined) => Promise<`0x${string}`>;
